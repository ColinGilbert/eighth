//
// core/math/frustum_ispc.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#ifndef ISPC_CORE_MATH_FRUSTUM_ISPC_H
#define ISPC_CORE_MATH_FRUSTUM_ISPC_H

#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus
///////////////////////////////////////////////////////////////////////////
// Vector types with external visibility from ispc code
///////////////////////////////////////////////////////////////////////////

#ifdef _MSC_VER
__declspec( align(16) ) struct float3 { float v[3]; };
#else
struct float3 { float v[3]; } __attribute__ ((aligned(16)));
#endif
#ifdef _MSC_VER
__declspec( align(16) ) struct int32_t3 { int32_t v[3]; };
#else
struct int32_t3 { int32_t v[3]; } __attribute__ ((aligned(16)));
#endif
#ifdef _MSC_VER
__declspec( align(16) ) struct float4 { float v[4]; };
#else
struct float4 { float v[4]; } __attribute__ ((aligned(16)));
#endif

struct Positions {
    float * x;
    float * y;
    float * z;
};

struct BucketDesc {
    float3  minimum;
    float3  maximum;
    int32_t3  count;
};

struct SphereInfo {
    uint32_t id;
    float depth;
};


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && !defined(__ISPC_NO_EXTERN_C)
extern "C" {
#endif // __cplusplus
    extern void ApplyForcesPredictPositions(struct Positions &inPrev_outEstimate, const struct Positions &original, uint32_t posCount, uint32_t numTasks);
    extern void MeasurePressure(float * pressure, const struct Positions &positions, uint32_t posCount, struct BucketDesc &bucketDesc, int32_t * bucketBegin, int32_t * bucketCount, uint32_t numTasks);
    extern void ParticleSort(int32_t * out_TotalBucketsCount, int32_t *  * out_TaskBucketsCount, int32_t *  * out_TaskBucketsOffset, struct Positions &out_positions, const struct Positions &positions, int32_t * out_keyIndexA, int32_t * out_keyIndexB, int32_t numTasks, uint32_t posCount, struct BucketDesc &bucketDesc);
    extern void ParticleSort1(int32_t * out_TotalBucketsCount, int32_t *  * out_TaskBucketsCount, int32_t *  * out_TaskBucketsOffset, struct Positions &out_positions, const struct Positions &positions, int32_t * out_keyIndexA, int32_t * out_keyIndexB, int32_t numTasks, uint32_t posCount, struct BucketDesc &bucketDesc);
    extern void ParticleSort2(int32_t * out_TotalBucketsCount, int32_t *  * out_TaskBucketsCount, int32_t *  * out_TaskBucketsOffset, struct Positions &out_positions, const struct Positions &positions, int32_t * out_keyIndexA, int32_t * out_keyIndexB, int32_t numTasks, uint32_t posCount, struct BucketDesc &bucketDesc);
    extern void ParticleSort3(int32_t * out_TotalBucketsCount, int32_t *  * out_TaskBucketsCount, int32_t *  * out_TaskBucketsOffset, struct Positions &out_positions, const struct Positions &positions, int32_t * out_keyIndexA, int32_t * out_keyIndexB, int32_t numTasks, uint32_t posCount, struct BucketDesc &bucketDesc);
    extern void ParticleSort4(int32_t * out_TotalBucketsCount, int32_t *  * out_TaskBucketsCount, int32_t *  * out_TaskBucketsOffset, struct Positions &out_positions, const struct Positions &positions, int32_t * out_keyIndexA, int32_t * out_keyIndexB, int32_t numTasks, uint32_t posCount, struct BucketDesc &bucketDesc);
    extern void RebucketPositions(int32_t * out_bucketBegin, int32_t * out_bucketCount, struct Positions &out_positions, const struct Positions &positions, uint32_t posCount, struct BucketDesc &bucketDesc);
    extern void SpheresFrustumInfo(const float4   * planes, const uint32_t * sphere_ids, const float * x, const float * y, const float * z, const float * radius, struct SphereInfo * out_info, uint32_t count, uint32_t * out_count);
    extern void SpheresFrustumInfo_Smp(const float4   * planes, const uint32_t * sphere_ids, const float * x, const float * y, const float * z, const float * radius, struct SphereInfo * out_info, uint32_t count, uint32_t * out_count);
    extern void SpheresInFrustum(const float4   * planes, const float * x, const float * y, const float * z, const float * radius, uint32_t * out_inside_flag, uint32_t count);
#if defined(__cplusplus) && !defined(__ISPC_NO_EXTERN_C)
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus

#endif // ISPC_CORE_MATH_FRUSTUM_ISPC_H
